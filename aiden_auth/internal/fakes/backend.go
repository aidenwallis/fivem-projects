// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"encoding/json"
	"sync"

	"github.com/aidenwallis/fivem-projects/aiden_auth/internal/backend"
	"github.com/aidenwallis/fivem-projects/aiden_auth/internal/db/models"
)

type FakeBackend struct {
	ClearSessionsStub        func(context.Context) error
	clearSessionsMutex       sync.RWMutex
	clearSessionsArgsForCall []struct {
		arg1 context.Context
	}
	clearSessionsReturns struct {
		result1 error
	}
	clearSessionsReturnsOnCall map[int]struct {
		result1 error
	}
	CreateSessionStub        func(context.Context, []string, json.RawMessage) (*models.Session, string, error)
	createSessionMutex       sync.RWMutex
	createSessionArgsForCall []struct {
		arg1 context.Context
		arg2 []string
		arg3 json.RawMessage
	}
	createSessionReturns struct {
		result1 *models.Session
		result2 string
		result3 error
	}
	createSessionReturnsOnCall map[int]struct {
		result1 *models.Session
		result2 string
		result3 error
	}
	DropSessionStub        func(context.Context, []string) error
	dropSessionMutex       sync.RWMutex
	dropSessionArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	dropSessionReturns struct {
		result1 error
	}
	dropSessionReturnsOnCall map[int]struct {
		result1 error
	}
	IsHealthyStub        func(context.Context) bool
	isHealthyMutex       sync.RWMutex
	isHealthyArgsForCall []struct {
		arg1 context.Context
	}
	isHealthyReturns struct {
		result1 bool
	}
	isHealthyReturnsOnCall map[int]struct {
		result1 bool
	}
	ValidateSessionStub        func(context.Context, string) (*models.Session, error)
	validateSessionMutex       sync.RWMutex
	validateSessionArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	validateSessionReturns struct {
		result1 *models.Session
		result2 error
	}
	validateSessionReturnsOnCall map[int]struct {
		result1 *models.Session
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBackend) ClearSessions(arg1 context.Context) error {
	fake.clearSessionsMutex.Lock()
	ret, specificReturn := fake.clearSessionsReturnsOnCall[len(fake.clearSessionsArgsForCall)]
	fake.clearSessionsArgsForCall = append(fake.clearSessionsArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ClearSessionsStub
	fakeReturns := fake.clearSessionsReturns
	fake.recordInvocation("ClearSessions", []interface{}{arg1})
	fake.clearSessionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBackend) ClearSessionsCallCount() int {
	fake.clearSessionsMutex.RLock()
	defer fake.clearSessionsMutex.RUnlock()
	return len(fake.clearSessionsArgsForCall)
}

func (fake *FakeBackend) ClearSessionsCalls(stub func(context.Context) error) {
	fake.clearSessionsMutex.Lock()
	defer fake.clearSessionsMutex.Unlock()
	fake.ClearSessionsStub = stub
}

func (fake *FakeBackend) ClearSessionsArgsForCall(i int) context.Context {
	fake.clearSessionsMutex.RLock()
	defer fake.clearSessionsMutex.RUnlock()
	argsForCall := fake.clearSessionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBackend) ClearSessionsReturns(result1 error) {
	fake.clearSessionsMutex.Lock()
	defer fake.clearSessionsMutex.Unlock()
	fake.ClearSessionsStub = nil
	fake.clearSessionsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBackend) ClearSessionsReturnsOnCall(i int, result1 error) {
	fake.clearSessionsMutex.Lock()
	defer fake.clearSessionsMutex.Unlock()
	fake.ClearSessionsStub = nil
	if fake.clearSessionsReturnsOnCall == nil {
		fake.clearSessionsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.clearSessionsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBackend) CreateSession(arg1 context.Context, arg2 []string, arg3 json.RawMessage) (*models.Session, string, error) {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.createSessionMutex.Lock()
	ret, specificReturn := fake.createSessionReturnsOnCall[len(fake.createSessionArgsForCall)]
	fake.createSessionArgsForCall = append(fake.createSessionArgsForCall, struct {
		arg1 context.Context
		arg2 []string
		arg3 json.RawMessage
	}{arg1, arg2Copy, arg3})
	stub := fake.CreateSessionStub
	fakeReturns := fake.createSessionReturns
	fake.recordInvocation("CreateSession", []interface{}{arg1, arg2Copy, arg3})
	fake.createSessionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeBackend) CreateSessionCallCount() int {
	fake.createSessionMutex.RLock()
	defer fake.createSessionMutex.RUnlock()
	return len(fake.createSessionArgsForCall)
}

func (fake *FakeBackend) CreateSessionCalls(stub func(context.Context, []string, json.RawMessage) (*models.Session, string, error)) {
	fake.createSessionMutex.Lock()
	defer fake.createSessionMutex.Unlock()
	fake.CreateSessionStub = stub
}

func (fake *FakeBackend) CreateSessionArgsForCall(i int) (context.Context, []string, json.RawMessage) {
	fake.createSessionMutex.RLock()
	defer fake.createSessionMutex.RUnlock()
	argsForCall := fake.createSessionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeBackend) CreateSessionReturns(result1 *models.Session, result2 string, result3 error) {
	fake.createSessionMutex.Lock()
	defer fake.createSessionMutex.Unlock()
	fake.CreateSessionStub = nil
	fake.createSessionReturns = struct {
		result1 *models.Session
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBackend) CreateSessionReturnsOnCall(i int, result1 *models.Session, result2 string, result3 error) {
	fake.createSessionMutex.Lock()
	defer fake.createSessionMutex.Unlock()
	fake.CreateSessionStub = nil
	if fake.createSessionReturnsOnCall == nil {
		fake.createSessionReturnsOnCall = make(map[int]struct {
			result1 *models.Session
			result2 string
			result3 error
		})
	}
	fake.createSessionReturnsOnCall[i] = struct {
		result1 *models.Session
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBackend) DropSession(arg1 context.Context, arg2 []string) error {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.dropSessionMutex.Lock()
	ret, specificReturn := fake.dropSessionReturnsOnCall[len(fake.dropSessionArgsForCall)]
	fake.dropSessionArgsForCall = append(fake.dropSessionArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2Copy})
	stub := fake.DropSessionStub
	fakeReturns := fake.dropSessionReturns
	fake.recordInvocation("DropSession", []interface{}{arg1, arg2Copy})
	fake.dropSessionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBackend) DropSessionCallCount() int {
	fake.dropSessionMutex.RLock()
	defer fake.dropSessionMutex.RUnlock()
	return len(fake.dropSessionArgsForCall)
}

func (fake *FakeBackend) DropSessionCalls(stub func(context.Context, []string) error) {
	fake.dropSessionMutex.Lock()
	defer fake.dropSessionMutex.Unlock()
	fake.DropSessionStub = stub
}

func (fake *FakeBackend) DropSessionArgsForCall(i int) (context.Context, []string) {
	fake.dropSessionMutex.RLock()
	defer fake.dropSessionMutex.RUnlock()
	argsForCall := fake.dropSessionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBackend) DropSessionReturns(result1 error) {
	fake.dropSessionMutex.Lock()
	defer fake.dropSessionMutex.Unlock()
	fake.DropSessionStub = nil
	fake.dropSessionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBackend) DropSessionReturnsOnCall(i int, result1 error) {
	fake.dropSessionMutex.Lock()
	defer fake.dropSessionMutex.Unlock()
	fake.DropSessionStub = nil
	if fake.dropSessionReturnsOnCall == nil {
		fake.dropSessionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.dropSessionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBackend) IsHealthy(arg1 context.Context) bool {
	fake.isHealthyMutex.Lock()
	ret, specificReturn := fake.isHealthyReturnsOnCall[len(fake.isHealthyArgsForCall)]
	fake.isHealthyArgsForCall = append(fake.isHealthyArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.IsHealthyStub
	fakeReturns := fake.isHealthyReturns
	fake.recordInvocation("IsHealthy", []interface{}{arg1})
	fake.isHealthyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBackend) IsHealthyCallCount() int {
	fake.isHealthyMutex.RLock()
	defer fake.isHealthyMutex.RUnlock()
	return len(fake.isHealthyArgsForCall)
}

func (fake *FakeBackend) IsHealthyCalls(stub func(context.Context) bool) {
	fake.isHealthyMutex.Lock()
	defer fake.isHealthyMutex.Unlock()
	fake.IsHealthyStub = stub
}

func (fake *FakeBackend) IsHealthyArgsForCall(i int) context.Context {
	fake.isHealthyMutex.RLock()
	defer fake.isHealthyMutex.RUnlock()
	argsForCall := fake.isHealthyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBackend) IsHealthyReturns(result1 bool) {
	fake.isHealthyMutex.Lock()
	defer fake.isHealthyMutex.Unlock()
	fake.IsHealthyStub = nil
	fake.isHealthyReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeBackend) IsHealthyReturnsOnCall(i int, result1 bool) {
	fake.isHealthyMutex.Lock()
	defer fake.isHealthyMutex.Unlock()
	fake.IsHealthyStub = nil
	if fake.isHealthyReturnsOnCall == nil {
		fake.isHealthyReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isHealthyReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeBackend) ValidateSession(arg1 context.Context, arg2 string) (*models.Session, error) {
	fake.validateSessionMutex.Lock()
	ret, specificReturn := fake.validateSessionReturnsOnCall[len(fake.validateSessionArgsForCall)]
	fake.validateSessionArgsForCall = append(fake.validateSessionArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ValidateSessionStub
	fakeReturns := fake.validateSessionReturns
	fake.recordInvocation("ValidateSession", []interface{}{arg1, arg2})
	fake.validateSessionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBackend) ValidateSessionCallCount() int {
	fake.validateSessionMutex.RLock()
	defer fake.validateSessionMutex.RUnlock()
	return len(fake.validateSessionArgsForCall)
}

func (fake *FakeBackend) ValidateSessionCalls(stub func(context.Context, string) (*models.Session, error)) {
	fake.validateSessionMutex.Lock()
	defer fake.validateSessionMutex.Unlock()
	fake.ValidateSessionStub = stub
}

func (fake *FakeBackend) ValidateSessionArgsForCall(i int) (context.Context, string) {
	fake.validateSessionMutex.RLock()
	defer fake.validateSessionMutex.RUnlock()
	argsForCall := fake.validateSessionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBackend) ValidateSessionReturns(result1 *models.Session, result2 error) {
	fake.validateSessionMutex.Lock()
	defer fake.validateSessionMutex.Unlock()
	fake.ValidateSessionStub = nil
	fake.validateSessionReturns = struct {
		result1 *models.Session
		result2 error
	}{result1, result2}
}

func (fake *FakeBackend) ValidateSessionReturnsOnCall(i int, result1 *models.Session, result2 error) {
	fake.validateSessionMutex.Lock()
	defer fake.validateSessionMutex.Unlock()
	fake.ValidateSessionStub = nil
	if fake.validateSessionReturnsOnCall == nil {
		fake.validateSessionReturnsOnCall = make(map[int]struct {
			result1 *models.Session
			result2 error
		})
	}
	fake.validateSessionReturnsOnCall[i] = struct {
		result1 *models.Session
		result2 error
	}{result1, result2}
}

func (fake *FakeBackend) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.clearSessionsMutex.RLock()
	defer fake.clearSessionsMutex.RUnlock()
	fake.createSessionMutex.RLock()
	defer fake.createSessionMutex.RUnlock()
	fake.dropSessionMutex.RLock()
	defer fake.dropSessionMutex.RUnlock()
	fake.isHealthyMutex.RLock()
	defer fake.isHealthyMutex.RUnlock()
	fake.validateSessionMutex.RLock()
	defer fake.validateSessionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBackend) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ backend.Backend = new(FakeBackend)
