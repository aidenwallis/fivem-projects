// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"
	"time"

	"github.com/aidenwallis/fivem-projects/aiden_auth/internal/db"
	"github.com/aidenwallis/fivem-projects/aiden_auth/internal/db/models"
	"github.com/uptrace/bun"
)

type FakeDB struct {
	BunStub        func() *bun.DB
	bunMutex       sync.RWMutex
	bunArgsForCall []struct {
	}
	bunReturns struct {
		result1 *bun.DB
	}
	bunReturnsOnCall map[int]struct {
		result1 *bun.DB
	}
	ClearSessionsStub        func(context.Context, time.Time) (int, error)
	clearSessionsMutex       sync.RWMutex
	clearSessionsArgsForCall []struct {
		arg1 context.Context
		arg2 time.Time
	}
	clearSessionsReturns struct {
		result1 int
		result2 error
	}
	clearSessionsReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	CreateSessionStub        func(context.Context, *models.Session, []string) error
	createSessionMutex       sync.RWMutex
	createSessionArgsForCall []struct {
		arg1 context.Context
		arg2 *models.Session
		arg3 []string
	}
	createSessionReturns struct {
		result1 error
	}
	createSessionReturnsOnCall map[int]struct {
		result1 error
	}
	DropSessionStub        func(context.Context, []string) (int, error)
	dropSessionMutex       sync.RWMutex
	dropSessionArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	dropSessionReturns struct {
		result1 int
		result2 error
	}
	dropSessionReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	ExpireSessionsStub        func(context.Context) (int, error)
	expireSessionsMutex       sync.RWMutex
	expireSessionsArgsForCall []struct {
		arg1 context.Context
	}
	expireSessionsReturns struct {
		result1 int
		result2 error
	}
	expireSessionsReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	PingStub        func(context.Context) error
	pingMutex       sync.RWMutex
	pingArgsForCall []struct {
		arg1 context.Context
	}
	pingReturns struct {
		result1 error
	}
	pingReturnsOnCall map[int]struct {
		result1 error
	}
	SessionStub        func(context.Context, string) (*models.Session, error)
	sessionMutex       sync.RWMutex
	sessionArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	sessionReturns struct {
		result1 *models.Session
		result2 error
	}
	sessionReturnsOnCall map[int]struct {
		result1 *models.Session
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDB) Bun() *bun.DB {
	fake.bunMutex.Lock()
	ret, specificReturn := fake.bunReturnsOnCall[len(fake.bunArgsForCall)]
	fake.bunArgsForCall = append(fake.bunArgsForCall, struct {
	}{})
	stub := fake.BunStub
	fakeReturns := fake.bunReturns
	fake.recordInvocation("Bun", []interface{}{})
	fake.bunMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDB) BunCallCount() int {
	fake.bunMutex.RLock()
	defer fake.bunMutex.RUnlock()
	return len(fake.bunArgsForCall)
}

func (fake *FakeDB) BunCalls(stub func() *bun.DB) {
	fake.bunMutex.Lock()
	defer fake.bunMutex.Unlock()
	fake.BunStub = stub
}

func (fake *FakeDB) BunReturns(result1 *bun.DB) {
	fake.bunMutex.Lock()
	defer fake.bunMutex.Unlock()
	fake.BunStub = nil
	fake.bunReturns = struct {
		result1 *bun.DB
	}{result1}
}

func (fake *FakeDB) BunReturnsOnCall(i int, result1 *bun.DB) {
	fake.bunMutex.Lock()
	defer fake.bunMutex.Unlock()
	fake.BunStub = nil
	if fake.bunReturnsOnCall == nil {
		fake.bunReturnsOnCall = make(map[int]struct {
			result1 *bun.DB
		})
	}
	fake.bunReturnsOnCall[i] = struct {
		result1 *bun.DB
	}{result1}
}

func (fake *FakeDB) ClearSessions(arg1 context.Context, arg2 time.Time) (int, error) {
	fake.clearSessionsMutex.Lock()
	ret, specificReturn := fake.clearSessionsReturnsOnCall[len(fake.clearSessionsArgsForCall)]
	fake.clearSessionsArgsForCall = append(fake.clearSessionsArgsForCall, struct {
		arg1 context.Context
		arg2 time.Time
	}{arg1, arg2})
	stub := fake.ClearSessionsStub
	fakeReturns := fake.clearSessionsReturns
	fake.recordInvocation("ClearSessions", []interface{}{arg1, arg2})
	fake.clearSessionsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDB) ClearSessionsCallCount() int {
	fake.clearSessionsMutex.RLock()
	defer fake.clearSessionsMutex.RUnlock()
	return len(fake.clearSessionsArgsForCall)
}

func (fake *FakeDB) ClearSessionsCalls(stub func(context.Context, time.Time) (int, error)) {
	fake.clearSessionsMutex.Lock()
	defer fake.clearSessionsMutex.Unlock()
	fake.ClearSessionsStub = stub
}

func (fake *FakeDB) ClearSessionsArgsForCall(i int) (context.Context, time.Time) {
	fake.clearSessionsMutex.RLock()
	defer fake.clearSessionsMutex.RUnlock()
	argsForCall := fake.clearSessionsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDB) ClearSessionsReturns(result1 int, result2 error) {
	fake.clearSessionsMutex.Lock()
	defer fake.clearSessionsMutex.Unlock()
	fake.ClearSessionsStub = nil
	fake.clearSessionsReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeDB) ClearSessionsReturnsOnCall(i int, result1 int, result2 error) {
	fake.clearSessionsMutex.Lock()
	defer fake.clearSessionsMutex.Unlock()
	fake.ClearSessionsStub = nil
	if fake.clearSessionsReturnsOnCall == nil {
		fake.clearSessionsReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.clearSessionsReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeDB) CreateSession(arg1 context.Context, arg2 *models.Session, arg3 []string) error {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.createSessionMutex.Lock()
	ret, specificReturn := fake.createSessionReturnsOnCall[len(fake.createSessionArgsForCall)]
	fake.createSessionArgsForCall = append(fake.createSessionArgsForCall, struct {
		arg1 context.Context
		arg2 *models.Session
		arg3 []string
	}{arg1, arg2, arg3Copy})
	stub := fake.CreateSessionStub
	fakeReturns := fake.createSessionReturns
	fake.recordInvocation("CreateSession", []interface{}{arg1, arg2, arg3Copy})
	fake.createSessionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDB) CreateSessionCallCount() int {
	fake.createSessionMutex.RLock()
	defer fake.createSessionMutex.RUnlock()
	return len(fake.createSessionArgsForCall)
}

func (fake *FakeDB) CreateSessionCalls(stub func(context.Context, *models.Session, []string) error) {
	fake.createSessionMutex.Lock()
	defer fake.createSessionMutex.Unlock()
	fake.CreateSessionStub = stub
}

func (fake *FakeDB) CreateSessionArgsForCall(i int) (context.Context, *models.Session, []string) {
	fake.createSessionMutex.RLock()
	defer fake.createSessionMutex.RUnlock()
	argsForCall := fake.createSessionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeDB) CreateSessionReturns(result1 error) {
	fake.createSessionMutex.Lock()
	defer fake.createSessionMutex.Unlock()
	fake.CreateSessionStub = nil
	fake.createSessionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDB) CreateSessionReturnsOnCall(i int, result1 error) {
	fake.createSessionMutex.Lock()
	defer fake.createSessionMutex.Unlock()
	fake.CreateSessionStub = nil
	if fake.createSessionReturnsOnCall == nil {
		fake.createSessionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createSessionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDB) DropSession(arg1 context.Context, arg2 []string) (int, error) {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.dropSessionMutex.Lock()
	ret, specificReturn := fake.dropSessionReturnsOnCall[len(fake.dropSessionArgsForCall)]
	fake.dropSessionArgsForCall = append(fake.dropSessionArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2Copy})
	stub := fake.DropSessionStub
	fakeReturns := fake.dropSessionReturns
	fake.recordInvocation("DropSession", []interface{}{arg1, arg2Copy})
	fake.dropSessionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDB) DropSessionCallCount() int {
	fake.dropSessionMutex.RLock()
	defer fake.dropSessionMutex.RUnlock()
	return len(fake.dropSessionArgsForCall)
}

func (fake *FakeDB) DropSessionCalls(stub func(context.Context, []string) (int, error)) {
	fake.dropSessionMutex.Lock()
	defer fake.dropSessionMutex.Unlock()
	fake.DropSessionStub = stub
}

func (fake *FakeDB) DropSessionArgsForCall(i int) (context.Context, []string) {
	fake.dropSessionMutex.RLock()
	defer fake.dropSessionMutex.RUnlock()
	argsForCall := fake.dropSessionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDB) DropSessionReturns(result1 int, result2 error) {
	fake.dropSessionMutex.Lock()
	defer fake.dropSessionMutex.Unlock()
	fake.DropSessionStub = nil
	fake.dropSessionReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeDB) DropSessionReturnsOnCall(i int, result1 int, result2 error) {
	fake.dropSessionMutex.Lock()
	defer fake.dropSessionMutex.Unlock()
	fake.DropSessionStub = nil
	if fake.dropSessionReturnsOnCall == nil {
		fake.dropSessionReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.dropSessionReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeDB) ExpireSessions(arg1 context.Context) (int, error) {
	fake.expireSessionsMutex.Lock()
	ret, specificReturn := fake.expireSessionsReturnsOnCall[len(fake.expireSessionsArgsForCall)]
	fake.expireSessionsArgsForCall = append(fake.expireSessionsArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ExpireSessionsStub
	fakeReturns := fake.expireSessionsReturns
	fake.recordInvocation("ExpireSessions", []interface{}{arg1})
	fake.expireSessionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDB) ExpireSessionsCallCount() int {
	fake.expireSessionsMutex.RLock()
	defer fake.expireSessionsMutex.RUnlock()
	return len(fake.expireSessionsArgsForCall)
}

func (fake *FakeDB) ExpireSessionsCalls(stub func(context.Context) (int, error)) {
	fake.expireSessionsMutex.Lock()
	defer fake.expireSessionsMutex.Unlock()
	fake.ExpireSessionsStub = stub
}

func (fake *FakeDB) ExpireSessionsArgsForCall(i int) context.Context {
	fake.expireSessionsMutex.RLock()
	defer fake.expireSessionsMutex.RUnlock()
	argsForCall := fake.expireSessionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDB) ExpireSessionsReturns(result1 int, result2 error) {
	fake.expireSessionsMutex.Lock()
	defer fake.expireSessionsMutex.Unlock()
	fake.ExpireSessionsStub = nil
	fake.expireSessionsReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeDB) ExpireSessionsReturnsOnCall(i int, result1 int, result2 error) {
	fake.expireSessionsMutex.Lock()
	defer fake.expireSessionsMutex.Unlock()
	fake.ExpireSessionsStub = nil
	if fake.expireSessionsReturnsOnCall == nil {
		fake.expireSessionsReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.expireSessionsReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeDB) Ping(arg1 context.Context) error {
	fake.pingMutex.Lock()
	ret, specificReturn := fake.pingReturnsOnCall[len(fake.pingArgsForCall)]
	fake.pingArgsForCall = append(fake.pingArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.PingStub
	fakeReturns := fake.pingReturns
	fake.recordInvocation("Ping", []interface{}{arg1})
	fake.pingMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDB) PingCallCount() int {
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	return len(fake.pingArgsForCall)
}

func (fake *FakeDB) PingCalls(stub func(context.Context) error) {
	fake.pingMutex.Lock()
	defer fake.pingMutex.Unlock()
	fake.PingStub = stub
}

func (fake *FakeDB) PingArgsForCall(i int) context.Context {
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	argsForCall := fake.pingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDB) PingReturns(result1 error) {
	fake.pingMutex.Lock()
	defer fake.pingMutex.Unlock()
	fake.PingStub = nil
	fake.pingReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDB) PingReturnsOnCall(i int, result1 error) {
	fake.pingMutex.Lock()
	defer fake.pingMutex.Unlock()
	fake.PingStub = nil
	if fake.pingReturnsOnCall == nil {
		fake.pingReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pingReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDB) Session(arg1 context.Context, arg2 string) (*models.Session, error) {
	fake.sessionMutex.Lock()
	ret, specificReturn := fake.sessionReturnsOnCall[len(fake.sessionArgsForCall)]
	fake.sessionArgsForCall = append(fake.sessionArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.SessionStub
	fakeReturns := fake.sessionReturns
	fake.recordInvocation("Session", []interface{}{arg1, arg2})
	fake.sessionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDB) SessionCallCount() int {
	fake.sessionMutex.RLock()
	defer fake.sessionMutex.RUnlock()
	return len(fake.sessionArgsForCall)
}

func (fake *FakeDB) SessionCalls(stub func(context.Context, string) (*models.Session, error)) {
	fake.sessionMutex.Lock()
	defer fake.sessionMutex.Unlock()
	fake.SessionStub = stub
}

func (fake *FakeDB) SessionArgsForCall(i int) (context.Context, string) {
	fake.sessionMutex.RLock()
	defer fake.sessionMutex.RUnlock()
	argsForCall := fake.sessionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDB) SessionReturns(result1 *models.Session, result2 error) {
	fake.sessionMutex.Lock()
	defer fake.sessionMutex.Unlock()
	fake.SessionStub = nil
	fake.sessionReturns = struct {
		result1 *models.Session
		result2 error
	}{result1, result2}
}

func (fake *FakeDB) SessionReturnsOnCall(i int, result1 *models.Session, result2 error) {
	fake.sessionMutex.Lock()
	defer fake.sessionMutex.Unlock()
	fake.SessionStub = nil
	if fake.sessionReturnsOnCall == nil {
		fake.sessionReturnsOnCall = make(map[int]struct {
			result1 *models.Session
			result2 error
		})
	}
	fake.sessionReturnsOnCall[i] = struct {
		result1 *models.Session
		result2 error
	}{result1, result2}
}

func (fake *FakeDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.bunMutex.RLock()
	defer fake.bunMutex.RUnlock()
	fake.clearSessionsMutex.RLock()
	defer fake.clearSessionsMutex.RUnlock()
	fake.createSessionMutex.RLock()
	defer fake.createSessionMutex.RUnlock()
	fake.dropSessionMutex.RLock()
	defer fake.dropSessionMutex.RUnlock()
	fake.expireSessionsMutex.RLock()
	defer fake.expireSessionsMutex.RUnlock()
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	fake.sessionMutex.RLock()
	defer fake.sessionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.DB = new(FakeDB)
